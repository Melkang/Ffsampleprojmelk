/*@layer reset, base, utilities, layout;*/

@view-transition {
  navigation: auto;
}

::view-transition-group(root) {
  animation-duration: 0.75s;
}

/* the reset here*/
@layer reset {
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  /* in mobile landscape mode, it won't change text size
    https://kilianvalkhof.com/2022/css-html/your-css-reset-needs-text-size-adjust-probably/ */
  html {
    -moz-text-size-adjust: none;
    -webkit-text-size-adjust: none;
    text-size-adjust: none;
  }

  body,
  h1,
  h2,
  h3,
  h4,
  p,
  figure,
  blockquote,
  dl,
  dd {
    margin: 0;
  }

  /* Instead of ol and li, this is a modern approach to not read to screen readers the list
    https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html */
  [role="list"] {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  body {
    min-block-size: 100vh;
    line-height: 1.6;
  }

  /*line height tighter for bigger sizes so we can manipulate padding if needed */
  h1,
  h2,
  h3,
  button,
  input,
  label {
    line-height: 1.1;
  }

  /*if a line of text shifts words to another line, this will balance the amount of words- progressive enhancement*/
  h1,
  h2,
  h3,
  h4 {
    text-wrap: balance;
  }

  /*large blocks of texts might create an orphan word, but this prevents it- as long as browser supports it-progressive enhancement*/
  p,
  li {
    text-wrap: pretty;
  }

  img,
  picture {
    max-inline-size: 100%;
    display: block;
  }

  input,
  button,
  textarea,
  select {
    font: inherit;
  }
}

/* :root custom properties + base/global styles here*/

@layer base {
  :root {
    /*darker shades are smaller numbers (ex: gray-100). Lighter shades are higher numbers (ex: brown-800) */
    --clr-white: hsl(0, 0%, 100%);
    --clr-gray-100: hsl(0, 2%, 79%);
    --clr-brand-400: hsl(25, 88%, 75%);
    --clr-brand-500: hsl(25, 88%, 66%);
    --clr-green-400: hsl(143, 19%, 49%);
    --clr-green-500: hsl(143, 38%, 37%);
    --clr-green-600: hsl(145, 29%, 19%);

    /* for light mode
    --clr-brown-100: hsl(10, 5%, 90);
    --clr-brown-200: hsl(9, 7%, 85%);
    --clr-brown-300: hsl(9, 8%, 75%);
    --clr-brown-400: hsl(0, 6%, 60%);
    */

    --clr-brown-500: hsl(10, 5%, 25%);
    --clr-brown-600: hsl(9, 7%, 21%);
    --clr-brown-700: hsl(9, 8%, 16%);
    --clr-brown-800: hsl(0, 6%, 15%);
    --clr-brown-900: hsl(0, 6%, 13%);

    --clr-orange-500: hsl(28, 43%, 28%);
    --clr-red-500: hsl(359, 34%, 24%);
    --clr-teal-500: hsl(186, 42%, 25%);

    /*Family Fonts: /*fira sans and outfit font*/
    --ff-heading: "Outfit", sans-serif;
    --ff-body: "Fira Sans", sans-serif;

    /*smaller font sizes are smaller numbers (ex: --fs-300: 0.875rem). larger font sizes are higher numbers (ex: --fs-900: 3.75rem). ALso changed figma design from px to rem units for accessibility/ user preferences when they have changed screen sizing. If keeping px, it might override user preferences */
    /*Font Sizes*/
    --fs-300: 0.875rem;
    --fs-400: 1rem;
    --fs-500: 1.125rem;
    --fs-600: 1.25rem;
    --fs-700: 1.5rem;
    --fs-800: 2rem;
    --fs-900: 3.75rem;
    --fs-1000: 3.75rem;

    @media (width > 760px) {
      --fs-300: 0.875rem;
      --fs-400: 1rem;
      --fs-500: 1.25rem;
      --fs-600: 1.5rem;
      --fs-700: 2rem;
      --fs-800: 3rem;
      --fs-900: 5rem;
      --fs-1000: 7.5rem;
    }
  }

  :root {
    /* primitives here - description by purpose*/
    --text-main: var(--clr-gray-100);
    --text-high-contrast: var(--clr-white);
    --text-brand: var(--clr-brand-500);
    --text-brand-light: var(--clr-brand-400);

    --background-accent-light: var(--clr-green-400);
    --background-accent-main: var(--clr-green-500);
    --background-accent-dark: var(--clr-green-600);

    --background-extra-light: var(--clr-brown-500);
    --background-light: var(--clr-brown-600);
    --background-main: var(--clr-brown-700);
    --background-dark: var(--clr-brown-800);
    --background-extra-dark: var(--clr-brown-900);

    --font-size-heading-sm: var(--fs-700);
    --font-size-heading-regular: var(--fs-800);
    --font-size-heading-lg: var(--fs-900);
    --font-size-heading-xl: var(--fs-1000);

    --font-size-sm: var(--fs-300);
    --font-size-regular: var(--fs-400);
    --font-size-md: var(--fs-500);
    --font-size-lg: var(--fs-600);

    /*Other Variable Properties from the Design*/
    --border-radius-sm: 0.25rem;
    --border-radius-med: 0.5rem;
    --border-radius-lg: 0.75rem;

    /*for light mode
    @media (prefers-color-scheme: light) {
    }*/
  }
}

@layer base {
  /*Custom Properties*/
  html {
    font-family: var(--ff-body);
    line-height: 1.6rem;
    scroll-padding: 3rem;
  }

  /*if user set preference for scrolling movement*/
  @media (prefers-reduced-motion: no-preference) {
    html {
      scroll-behavior: smooth; /*when clicking FAQ tab this will indicate scrolling down to section instead of making the user think it jumped to another page*/
    }
  }

  h1 {
    font-size: var(--font-size-heading-lg);
  }

  body {
    font-family: var(--ff-body);
    font-size: var(--font-size-regular);
    color: var(--text-main);
    background-color: var(--background-main);
  }

  h1,
  h2,
  h3,
  h4 {
    font-family: var(--ff-heading);
    font-weight: 700;
    color: var(--text-high-contrast);
  }

  a {
    color: var(--text-high-contrast);
  }

  a:hover,
  a:focus-visible {
    color: var(--text-brand-light);
  }

  img {
    border-radius: var(--border-radius-lg);
  }
}

@layer layout {
  /* limit the maximum width the content can reach and add custom properties because it shows up in multi spots*/
  .flex-group {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  /* since margin:0 was applied in the beginning, flow(spacing) needs to be added back. Flow class-selects everything except the first child*/
  .flow > * + * {
    margin-top: var(
      --flow-spacer,
      1em
    ); /*provides larger gap with proximity to text than rem*/
  }

  .grid-flow {
    display: grid;
    gap: var(--grid-flow-gap, 1rem);
  }

  .grid-auto-fill {
    --auto-fit-min-col-size: 250px;
    display: grid;
    gap: 1rem;
    /*for the min value it will choose the smallest value out of 300px or 100% to fix any overflow issues and the 1fr takes up the remaining space*/
    grid-template-columns: repeat(
      auto-fill,
      minmax(min(var(--auto-fit-min-col-size), 100%), 1fr)
    );
  }

  .equal-columns {
    display: grid;
    gap: var(--equal-columns-gap, 1rem);
    align-items: var(--equal-columns-vertical-alignment, stretch);

    @media (width > 760px) {
      grid-auto-flow: column;
      grid-auto-columns: 1fr;
    }

    &[data-gap="large"] {
      --equal-columns-gap: 2rem;
    }

    &[data-alignment="centered"] {
      --equal-columns-vertical-alignment: center;
    }
    /*if wanting to do flex and have same exact width for each column: 
    .flex-equal-columns 
    {display: flex;
    >* {flex: 1;}}*/
  }
  .wrapper {
    /*or can do the calc(1130px +2rem) with 1 rem = to 16px on each side instead of changing box sizing*/
    --wrapper-max-width: 1130px;
    --wrapper-padding: 1rem;

    max-width: var(--wrapper-max-width);
    margin-inline: auto;
    padding-inline: var(--wrapper-padding);

    /* helps to match the Figma file sizing to set it to the content */
    box-sizing: content-box;
  }

  /*data attributes based on CUBE CSS styling. Easier to read in HTML. Can hook into with JS. The symbol & is a placeholder for the original selector (wrapper)*/
  .wrapper[data-width="narrow"] {
    --wrapper-max-width: 720px;
  }

  .wrapper[data-width="wide"] {
    --wrapper-max-width: 1330px;
  }

  .section {
    --padding-block: 3.75rem;
    padding-block: var(--padding-block);

    @media (min-width: 760px) {
      --padding-block: 8rem;

      &[data-padding="compact"] {
        --padding-block: 4.5rem;
      }
    }
  }
}

@layer components {
  .skip-to-main {
    position: absolute;
    background: var(--background-accent-light);
    padding: 1rem;
    border-radius: var(--border-radius-med);
  }
  .skip-to-main:not(:focus) {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }

  .site-header {
    padding-block: 1rem;
    overflow-x: clip;
    position: relative;
  }

  .site-header--inner {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem 2rem; /*font spacing to make it visually even around around tabs*/
    justify-content: space-between;
  }

  [aria-controls="primary-nav"] {
    z-index: 1000;
    cursor: pointer;
    background: transparent;
    border: 0;
    display: none;
    img {
      border-radius: 0;
    }
  }

  .primary-navigation {
    ul {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem 1rem;
    }

    a {
      text-decoration: none;
    }

    @media (width < 760px) {
      display: none;
      opacity: 0;
      transition: opacity 1s, display 1s;
      transition-behavior: allow-discrete;
      position: absolute;
      z-index: 10;
      top: 0;
      right: 0;
      font-size: var(--font-size-lg);
      font-weight: 700;
      font-family: var(--ff-heading);
      background-color: var(--background-accent-main);
      padding: 2rem;
      border-radius: 0 0 0 var(--border-radius-lg);

      ul {
        gap: 0; /*remove gaps to bring in line easier*/
        flex-direction: column;
      }

      li {
        --delay: 0.3s;
        translate: 50%;
        transition: translate 0.5s var(--delay), opacity 0.5s var(--delay);
      }

      li:nth-child(2) {
        --delay: 0.4s;
      }

      li:nth-child(3) {
        --delay: 0.5s;
      }

      /*In the menu the second two children are selected*/
      li + li {
        border-top: 2px solid var(--background-accent-light);
        margin-block-start: 1.5rem;
        padding-block-start: 1.5rem;
      }
    }
  }

  /*when the hamburger icon is clicked, the menu opens and then closes. the "~" sympbol is looking at only direct siblings so this only works when the nav is right next to the button in the html*/
  @media (width < 760px) {
    [aria-controls="primary-nav"] {
      display: block;
    }
    [aria-expanded="true"] ~ .primary-navigation {
      display: block;
      /*does fade in animation for mobile nav*/
      /*final opened state*/
      opacity: 1;

      @starting-style {
        /*transition from this on entry*/
        opacity: 0;
        translate: 0 -100%;
      }

      li {
        translate: 0 0;
        opacity: 1;

        @starting-style {
          opacity: 0;
          translate: 50% 0;
        }
      }
    }
  }

  .site-footer {
    text-align: center;
    padding-block: 2rem;
    background-color: var(--background-dark);
    display: grid;
    gap: 2rem;

    a {
      color: var(--text-main);
    }

    a:hover,
    a:focus-visible {
      color: var(--text-brand-light);
    }
  }

  .site-footer--title {
    font-size: var(--font-size-lg);
    font-family: var(--ff-heading);
    font-weight: 700;
  }

  .hero {
    text-align: center;
    background-image: url(/assets/hero.webp);
    background-size: cover;
    background-position: center;
    font-size: var(--font-size-md);
    color: var(--text-high-contrast);

    animation: fade-out forwards;
    animation-timeline: view();
    animation-range-start: exit;
  }

  .card-animation {
    animation: fade-in both;
    animation-timeline: view();
  }

  .hero--title {
    font-size: var(--font-size-heading-lg);
    > span {
      display: block;
      font-size: var(--font-size-heading-xl);
      color: var(--text-brand);
    }
  }

  .mushroom-guide {
    --card-title-font-size: var(--font-size-lg);
    --card-title-color: var(--text-high-contrast);
    --card-gap: 0.75rem;
  }

  .faq-bento {
    --card-title-color: var(--text-high-contrast);
    display: grid;
    gap: 1rem;
    grid-template-areas:
      "card-one"
      "card-two"
      "card-three"
      "card-four";

    @media (width > 600px) {
      grid-template-areas:
        "card-one card-two"
        "card-three card-four";
    }

    @media (width > 900px) {
      grid-template-columns: repeat(3, 1fr);
      grid-template-areas:
        "card-one card-two card-four"
        "card-three card-three card-four";
    }

    .card > img {
      height: 100%;
      object-fit: cover;
    }

    @media (width > 600px) {
      .card:nth-child(even) > img {
        order: 3;
      }
    }
    .card:nth-child(1) {
      grid-area: card-one;
    }
    .card:nth-child(2) {
      grid-area: card-two;
    }
    .card:nth-child(3) {
      grid-area: card-three;

      @media (width > 900px) {
        display: grid;
        gap: 1rem;
        grid-template-columns: 1fr 1fr;

        img {
          grid-column: 1 / 2;
          grid-row: 1 / 3;
        }
      }
    }
    .card:nth-child(4) {
      grid-area: card-four;
    }
  }

  .card {
    display: flex;
    flex-direction: column;
    gap: var(--card-gap, 1rem);
    padding: 1rem;
    background-color: var(--background-light);
    border-radius: var(--border-radius-lg);

    img {
      border-radius: var(--border-radius-med);
    }
  }

  .card--title {
    color: var(--card-title-color, var(--text-brand));
    font-size: var(--card-title-font-size, var(--font-size-heading-sm));
  }

  .card--note {
    background-color: var(--background-extra-light);
    padding: 0.75rem;
    border-radius: var(--border-radius-med);
    margin-block-start: auto;
  }

  .tag-list {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;

    li {
      font-family: var(--ff-heading);
      color: var(--text-high-contrast);
      font-size: var(--font-size-sm);
      padding: 0rem, 0.25rem;
      background-color: var(--tag-bg, red);
      border-radius: var(--border-radius-sm);
    }

    [data-edible="edible"] {
      --tag-bg: var(--background-accent-main);
    }

    [data-edible="toxic"] {
      --tag-bg: var(--clr-red-500);
    }
    [data-season="summer"] {
      --tag-bg: var(--background-accent-main);
    }
    [data-season="spring"] {
      --tag-bg: var(--clr-teal-500);
    }
    [data-season="fall"] {
      --tag-bg: var(--clr-orange-500);
    }
  }

  .button {
    display: inline-flex; /*will flex if icon needs to be added*/
    padding: 0.5rem 1rem;
    background-color: var(--background-accent-main);
    font-family: var(--ff-heading);
    font-weight: 700;
    font-size: var(--font-size-md);
    cursor: pointer;
    text-decoration: none;
    border-radius: var(--border-radius-med);
  }

  .button:hover,
  .button:focus-visible {
    color: var(--text-high-contrast);
    background-color: var(--background-accent-light);
  }

  /*If wanting to refactor later for custom buttons, maybe put custom properties on the button class modifier instead of up higher on the layer? like this: 
    .button {
      --button-text: var(--text-high-contrast);
      --button-bg: var(--background-accent);
      --button-br: var(--border-radius-1);
      --button-hover-text: var(--text-high-contrast);
      --button-hover-bg: var(--background-accent-light);

    color: var(--button-text);
    background-color: var(--button-bg);
    border-radius: var(--button-br);
    }

    .button:hover,
    .button:focus-visible {
      color: var(--button-text-hover);
      background-color: var(--button-bg-hover);
    }*/

  select {
    padding: 0.5rem 1rem;
    background-color: var(--background-accent-main);
    border: 0;
    border-radius: var(--border-radius-med);
    color: var(--text-high-contrast);
  }
}

@layer utilities {
  [hidden] {
    display: none;
  }

  /*when the screen is being resized the animations will pause*/
  .resizing * {
    transition: none !important;
    animation-play-state: paused !important;
  }

  /*buttons are too short to describe in full the context. Utilities created for screen readers and assistive tech*/
  .visually-hidden {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }

  /*background colors, font sizes, border radius go into utility classes*/
  .section-title {
    font-size: var(--font-size-heading-regular);
  }
  .text-center {
    text-align: center;
  }
  .text-brand {
    color: var(--text-brand);
  }
  .text-brand-light {
    color: var(--text-brand-light);
  }
  .text-main {
    color: var(--text-main);
  }
  .text-high-contrast {
    color: var(--text-high-contrast);
  }
  .background-main {
    background-color: var(--background-main);
  }
  .background-light {
    background-color: var(--background-light);
  }
  .background-extra-light {
    background-color: var(--background-extra-light);
  }
  .background-dark {
    background-color: var(--background-dark);
  }
  .background-extra-dark {
    background-color: var(--background-extra-dark);
  }
  .background-accent {
    background-color: var(--background-accent-dark);
  }
  /*.background-accent-light {
   background-color: var(--background-accent-light);
  }

  .background-accent-main {
    background-color: var(--background-accent-main);
  }

  .background-accent-dark {
    background-color: var(--background-accent-dark);
  }*/

  .font-size-heading-sm {
    font-size: var(--font-size-heading-sm);
  }
  .font-size-heading-regular {
    font-size: var(--font-size-heading-regular);
  }
  .font-size-heading-lg {
    font-size: var(--font-size-heading-lg);
  }
  .font-size-heading-xl {
    font-size: var(--font-size-heading-xl);
  }
  .font-size-sm {
    font-size: var(--font-size-sm);
  }
  .font-size-regular {
    font-size: var(--font-size-regular);
  }
  .font-size-md {
    font-size: var(--font-size-md);
  }
  .font-size-lg {
    font-size: var(--font-size-lg);
  }
}

@keyframes fade-out {
  from {
    opacity: 1;
  }
  to {
    opacity: 0.5;
  }
}

/*@keyframes fade-in {
  from {
    opacity: 0.5;
  }
  to {
    opacity: 1;
  }
}*/
